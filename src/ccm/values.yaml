anomaly-detection:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/ce-anomaly-detection-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "12"
    digest: ""
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8081
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 70
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources:
    limits:
      cpu: "1024m"
      memory: "2048Mi"
    requests:
      cpu: "1024m"
      memory: "2048Mi"

batch-processing:
  replicaCount: 2
  isolatedReplica: 2
  java:
    memory: "7168"
  image:
    registry: docker.io
    repository: harness/batch-processing-signed
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "77500"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  mongoSecrets:
    userName:
      name: harness-secrets
      key: mongodbUsername
    password:
      name: mongodb-replicaset-chart
      key: mongodb-root-password
  timescaleSecret:
    password:
      name: harness-secrets
      key: timescaledbPostgresPassword
  smtp:
    host: ""
    password: ""
    user: ""
  ceBatchGCPCredentials: ""
  ceGCPHomeProjectCreds: ""
  storageObjectAdmin: ""
  awsSecret:
    S3_SYNC_CONFIG_ACCESSKEY: ""
    S3_SYNC_CONFIG_SECRETKEY: ""
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 6340
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  uiServerUrl: "https://app.harness.io"
  GCP_PROJECT_ID: "placeHolder"
  resources:
    limits:
      cpu: 1
      memory: "8192Mi"
    requests:
      cpu: 1
      memory: "8192Mi"

cloud-info:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/ce-cloud-info-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.19.0"
    digest: ""
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8082
    targetPort: 8000
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  CLOUD_INFO_GCP_CREDS: ""
  CLOUD_INFO_CONFIG: ""
  resources:
    limits:
      cpu: 2
      memory: "5120Mi"
    requests:
      cpu: 2
      memory: "5120Mi"
event-service:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: 1024
  image:
    registry: docker.io
    repository: harness/event-service-signed
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "77317"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  eventSvcServiceAccounts:
    ceGCPHomeProjectCreds:
      name: placeHolderName
      key: placeHolderKey
  mongoSecrets:
    userName:
      name: harness-secrets
      key: mongodbUsername
    password:
      name: mongodb-replicaset-chart
      key: mongodb-root-password
  timescaleSecret:
    password:
      name: harness-secrets
      key: timescaledbPostgresPassword
  ce-gcp-home-project-creds: ""
  nameOverride: ""
  fullnameOverride: ""
  ngServiceAccount: "test"
  redislabsCATruststore: "test"
  defaultInternalImageConnector: "test"
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 7280
    port2: 9889
  ingress:
    className: nginx
  resources:
    limits:
      cpu: "512m"
      memory: "1440Mi"
    requests:
      cpu: "512m"
      memory: "1440Mi"
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

lwd:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/lightwing-signed
    pullPolicy: IfNotPresent
    tag: "main-1.1.791"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  postgresPassword:
    name: postgres
    key: postgres-password
  lwdSecrets:
    secretName: lwd-secrets
    faktoryPassword: FAKTORY_PASSWORD
    lightwingAwsmasterAccessKey: LIGHTWING_AWSMASTER_ACCESS_KEY
    lightwingAwsmasterSecretKey: LIGHTWING_AWSMASTER_SECRET_KEY
    lightwingAwsGovmasterAccessKey: LIGHTWING_AWS-GOV-MASTER_ACCESS_KEY
    lightwingAwsGovmasterSecretKey: LIGHTWING_AWS-GOV-MASTER_SECRET_KEY
    lightwingCloudConnectorAzureClientSecret: LIGHTWING_CLOUD-CONNECTOR_AZURE_CLIENT_SECRET
    lightwingMetricsSegment: LIGHTWING_METRICS_SEGMENT
  ce-batch-gcp-credentials: ""
  aws:
    region: "us-east-1"
  azure:
    clientId: ""
  redisUrl: "redis://localhost:6379"
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9090
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  LIGHTWING_GCPCOST_PROJECT: "placeHolder"
  resources:
    limits:
      cpu: 2
      memory: "4Gi"
    requests:
      cpu: 2
      memory: "4Gi"

lwd-autocud:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/lightwing-signed
    pullPolicy: IfNotPresent
    tag: "main-1.1.564"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  postgresPassword:
    name: postgres
    key: postgres-password
  lwdAutocudSecrets:
    secretName: lwd-secrets
    faktoryPassword: FAKTORY_PASSWORD
    lightwingAwsmasterAccessKey: LIGHTWING_AWSMASTER_ACCESS_KEY
    lightwingAwsmasterSecretKey: LIGHTWING_AWSMASTER_SECRET_KEY
    lightwingAwsGovmasterAccessKey: LIGHTWING_AWS-GOV-MASTER_ACCESS_KEY
    lightwingAwsGovmasterSecretKey: LIGHTWING_AWS-GOV-MASTER_SECRET_KEY
    lightwingCloudConnectorAzureClientSecret: LIGHTWING_CLOUD-CONNECTOR_AZURE_CLIENT_SECRET
    lightwingMetricsSegment: LIGHTWING_METRICS_SEGMENT
  ce-batch-gcp-credentials: ""
  aws:
    region: "us-east-1"
  azure:
    clientId: ""
  redisUrl: "redis://localhost:6379"
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9090
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  LIGHTWING_GCPCOST_PROJECT: "placeHolder"
  resources:
    limits:
      cpu: 2
      memory: "4Gi"
    requests:
      cpu: 2
      memory: "4Gi"

lwd-faktory:
  replicaCount: 1
  image:
    registry: docker.io
    repository: contribsys/faktory
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.6.1"
    digest: ""
  faktory:
    password:
      name: lwd-secrets
      key: FAKTORY_PASSWORD
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    dashboard:
      port: 7420
      name: "dashboard"
    api:
      port: 7419
      name: "api"
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  persistentVolume:
    storage:
      models: "20Gi"
    accessModes: "ReadWriteOnce"
  resources:
    limits:
      cpu: 2
      memory: "4Gi"
    requests:
      cpu: 2
      memory: "4Gi"

lwd-worker:
  replicaCount: 3
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/lightwing-signed
    pullPolicy: IfNotPresent
    tag: "main-1.1.791"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  postgresPassword:
    name: postgres
    key: postgres-password
  lwdWorkerSecrets:
    secretName: lwd-secrets
    faktoryPassword: FAKTORY_PASSWORD
    lightwingAwsmasterAccessKey: LIGHTWING_AWSMASTER_ACCESS_KEY
    lightwingAwsmasterSecretKey: LIGHTWING_AWSMASTER_SECRET_KEY
    lightwingAwsGovmasterAccessKey: LIGHTWING_AWS-GOV-MASTER_ACCESS_KEY
    lightwingAwsGovmasterSecretKey: LIGHTWING_AWS-GOV-MASTER_SECRET_KEY
    lightwingCloudConnectorAzureClientSecret: LIGHTWING_CLOUD-CONNECTOR_AZURE_CLIENT_SECRET
    lightwingMetricsSegment: LIGHTWING_METRICS_SEGMENT
  ce-batch-gcp-credentials: ""
  aws:
    region: "us-east-1"
  azure:
    clientId: ""
  redisUrl: "redis://localhost:6379"
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9090
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  LIGHTWING_GCPCOST_PROJECT: "placeHolder"
  resources:
    limits:
      cpu: 2
      memory: "4Gi"
    requests:
      cpu: 2
      memory: "4Gi"

nextgen-ce:
  replicaCount: 2
  maxSurge: 100%
  maxUnavailable: 0
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/ce-nextgen-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "77300"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  mongoSecrets:
    userName:
      name: harness-secrets
      key: mongodbUsername
    password:
      name: mongodb-replicaset-chart
      key: mongodb-root-password
  timescaleSecret:
    password:
      name: harness-secrets
      key: timescaledbPostgresPassword
  awsSecret:
    AWS_ACCESS_KEY: ""
    AWS_SECRET_KEY: ""
    AWS_ACCOUNT_ID: ""
    AWS_DESTINATION_BUCKET: ""
    AWS_TEMPLATE_LINK: ""
    CE_AWS_TEMPLATE_URL: ""
  ceng-gcp-credentials: ""
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 6340
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  GCP_PROJECT_ID: "placeHolder"
  resources:
    limits:
      cpu: 2
      memory: "5120Mi"
    requests:
      cpu: 2
      memory: "5120Mi"

telescopes:
  replicaCount: 1
  java:
    memory: "4096m"
    memoryLimit: "4096m"
  image:
    registry: docker.io
    repository: harness/telescopes-signed
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "10100"
    digest: ""
  waitForInitContainer:
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: IfNotPresent
      tag: "latest"
      digest: ""
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: false
    annotations: {}
    name: "harness-default"
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9090
  ingress:
    className: nginx
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources:
    limits:
      cpu: "512m"
      memory: "1024Mi"
    requests:
      cpu: "512m"
      memory: "1024Mi"

clickhouse:
  fullnameOverride: "clickhouse"
  replicaCount: 3
  shards: 1
  image:
    tag: 22.11.2-debian-11-r0
  resources:
    limits:
      cpu: "16000m"
      memory: "6Gi"
    requests:
      cpu: "16000m"
      memory: "6Gi"
  persistence:
    size: 1Ti
  zookeeper:
    replicaCount: 3
    fullnameOverride: "zookeeper"
