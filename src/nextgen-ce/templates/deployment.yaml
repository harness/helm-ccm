apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextgen-ce
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "nextgen-ce.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "nextgen-ce.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: nextgen-ce
        {{- include "nextgen-ce.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "nextgen-ce.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "nextgen-ce.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
    #waits only for mongo & timescale to start
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      containers:
        - name: nextgen-ce
          securityContext:
            {{- toYaml .Values.securityContext | indent 12 }}
          {{- if .Values.clickhouse.enabled }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.imageClickhouseEnabled "global" .Values.global) }}
          {{- else }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /ccm/api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /ccm/api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 15
          envFrom:
            - configMapRef:
                name: nextgen-ce
            - secretRef:
                name: nextgen-ce
          env:
            {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnection.mongoEnv" . | nindent 12 }}
            - name: EVENTS_MONGO_DB_URL
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "events" "context" $) }}
            - name: NOTIFICATION_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "notifications" "context" $) }}
            - name : TIMESCALEDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecret.password.name }}
                  key: {{ .Values.timescaleSecret.password.key }}
            - name : TIMESCALEDB_USERNAME
              value: postgres
            - name: TIMESCALEDB_URI
              value: 'jdbc:postgresql://timescaledb-single-chart.{{ .Release.Namespace }}:5432/harness'
            {{- if .Values.clickhouse.enabled }}
            - name : CLICKHOUSE_USERNAME
              value: {{ .Values.clickhouse.username | quote}}
            - name: CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.clickhouse.password.name }}
                  key: {{ .Values.clickhouse.password.key }}
            {{- end }}
          {{- if not .Values.workloadIdentity.enabled }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
        {{- if .Values.extraVolumeMounts }}
        {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 10 }}
        {{- end }}
          - name: secret-mount
            mountPath: /opt/harness/svc
          {{- end }}
      {{- if not .Values.workloadIdentity.enabled }}
      volumes:
      {{- if .Values.extraVolumes }}
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 6 }}
      {{- end }}
      - name: secret-mount
        secret:
          secretName: ceng-secret-mount
          items:
          - key: ceng-gcp-credentials
            path: ceng_gcp_credentials.json
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - nextgen-ce
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
